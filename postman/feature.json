{
	"info": {
		"_postman_id": "01647c5e-3933-4697-9b3d-dd1b1670be8e",
		"name": "Test EWM - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23645505"
	},
	"item": [
		{
			"name": "Получение списка комментариев пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name)\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит массив комментариев\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"    pm.expect(jsonData.length > 0);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит все нужные поля: id, text, created, creatorName, eventName, state\", () => {\r",
							"    const jsonData = pm.response.json()[0];\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"text\");\r",
							"    pm.expect(jsonData).to.have.property(\"created\");\r",
							"    pm.expect(jsonData).to.have.property(\"creatorName\");\r",
							"    pm.expect(jsonData).to.have.property(\"eventName\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"});\r",
							"\r",
							"pm.test(\"Все комментарии принадлежат текущему пользователю\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedName = pm.collectionVariables.get(\"commentatorName\");\r",
							"\r",
							"    jsonData.forEach(comment => {\r",
							"        pm.expect(comment.creatorName).to.eql(expectedName);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"        pm.collectionVariables.set(\"comId\", comment.id)\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equals(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"\r",
							"        console.log(\"eid из переменных:\", pm.collectionVariables.get(\"eid\"));\r",
							"        console.log(\"eventId:\", event.id, \"event title:\", event.title);\r",
							"\r",
							"        \r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит массив комментариев\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"    pm.expect(jsonData.length > 0);\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит все нужные поля: id, text, created, creatorName, eventName, state\", () => {\r",
							"    const jsonData = pm.response.json()[0];\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"text\");\r",
							"    pm.expect(jsonData).to.have.property(\"created\");\r",
							"    pm.expect(jsonData).to.have.property(\"creatorName\");\r",
							"    pm.expect(jsonData).to.have.property(\"eventName\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"});\r",
							"\r",
							"pm.test(\"Все комментарии относятся к текущему событию\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedName = pm.collectionVariables.get(\"eventName\");\r",
							"\r",
							"    jsonData.forEach(comment => {\r",
							"        pm.expect(comment.eventName).to.eql(expectedName);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария минимальной длины",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(30);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"                \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит все нужные поля: id, text, created, creatorName, eventName, state\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"text\");\r",
							"    pm.expect(jsonData).to.have.property(\"created\");\r",
							"    pm.expect(jsonData).to.have.property(\"creatorName\");\r",
							"    pm.expect(jsonData).to.have.property(\"eventName\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"});\r",
							"\r",
							"pm.test(\"Имя автора комментария совпадает с именем пользователя, оставлявшего комментарий\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedName = pm.collectionVariables.get(\"commentatorName\");\r",
							"\r",
							"    pm.expect(jsonData.creatorName).to.eql(expectedName);\r",
							"});\r",
							"\r",
							"pm.test(\"Текст комментария совпадает\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedText = pm.variables.get(\"text\");\r",
							"\r",
							"    pm.expect(jsonData.text).to.eql(expectedText);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария максимальной длины",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.environment.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(500);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"\r",
							"        \r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Ответ содержит все нужные поля: id, text, created, creatorName, eventName, state\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"text\");\r",
							"    pm.expect(jsonData).to.have.property(\"created\");\r",
							"    pm.expect(jsonData).to.have.property(\"creatorName\");\r",
							"    pm.expect(jsonData).to.have.property(\"eventName\");\r",
							"    pm.expect(jsonData).to.have.property(\"state\");\r",
							"});\r",
							"\r",
							"pm.test(\"Имя автора комментария совпадает с именем пользователя, оставлявшего комментарий\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedName = pm.collectionVariables.get(\"commentatorName\");\r",
							"\r",
							"    pm.expect(jsonData.creatorName).to.eql(expectedName);\r",
							"});\r",
							"\r",
							"pm.test(\"Текст комментария совпадает\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expectedText = pm.variables.get(\"text\");\r",
							"\r",
							"    pm.expect(jsonData.text).to.eql(expectedText);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление текста комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        pm.variables.set(\"comId\", comment.id);\r",
							"        pm.collectionVariables.set(\"oldComment\", commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"\r",
							"        const updCommentText = rnd.getWord(50);\r",
							"        pm.variables.set(\"updText\", updCommentText);\r",
							"        await api.updateComment(comment.id, commentator.id, updCommentText);\r",
							"        pm.collectionVariables.set(\"newCommentText\", updCommentText);\r",
							"\r",
							"\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Текст события изменен\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    const oldComment = pm.collectionVariables.get(\"oldComment\");\r",
							"    pm.expect(jsonData.text).to.not.eql(oldComment);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{updText}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария ADM",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"        pm.collectionVariables.set(\"comId\", comment.id)\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equals(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с длиной меньше 30",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", initiator.id);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(29);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с длиной больше 500",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(501);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария без подтвержденной заявки",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.environment.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        // await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(30);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"                \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.expect(pm.response.code).to.be.equals(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание пустого комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"commentatorName\", commentator.name);\r",
							"        pm.collectionVariables.set(\"uid\", commentator.id);\r",
							"\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id)\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = \" \";\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{text}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление текста чужого комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", initiator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"        pm.variables.set(\"text\", commentText);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        pm.variables.set(\"comId\", comment.id);\r",
							"        pm.collectionVariables.set(\"oldComment\", commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"\r",
							"        const updCommentText = rnd.getWord(50);\r",
							"        pm.variables.set(\"updText\", updCommentText);\r",
							"        await api.updateComment(comment.id, commentator.id, updCommentText);\r",
							"        pm.collectionVariables.set(\"newCommentText\", updCommentText);\r",
							"\r",
							"\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
							"    pm.response.to.be.forbidden;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"{{updText}}\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление чужого комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const api = new API(pm);\r",
							"const rnd = new RandomUtils();\r",
							"\r",
							"const main = async () => {\r",
							"    try {\r",
							"        const initiator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"initiatorId\", initiator.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const eventBody = rnd.getEvent(category.id);\r",
							"        eventBody.requestModeration = true;\r",
							"        const event = await api.addEvent(initiator.id, eventBody);\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        pm.collectionVariables.set(\"eventName\", event.title);\r",
							"\r",
							"        await api.publishEvent(event.id);\r",
							"\r",
							"        const commentator = await api.addUser(rnd.getUser());\r",
							"        pm.environment.set(\"commentatorId\", commentator.id);\r",
							"        pm.collectionVariables.set(\"uid\", initiator.id);\r",
							"        \r",
							"        const request = await api.publishParticipationRequest(event.id, commentator.id);\r",
							"        pm.environment.set(\"requestId\", request.id);\r",
							"\r",
							"        await api.acceptParticipationRequest(event.id, initiator.id, request.id);\r",
							"\r",
							"        const commentText = rnd.getWord(50);\r",
							"\r",
							"        const comment = await api.addComment(commentator.id, event, commentText);\r",
							"        await api.publicComment(comment.id);\r",
							"        pm.collectionVariables.set(\"comId\", comment.id)\r",
							"\r",
							"    } catch (err) {\r",
							"        console.error(\"Ошибка при подготовке данных:\", err);\r",
							"        throw err;\r",
							"    }\r",
							"};\r",
							"\r",
							"main();\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 403 и данные в формате json\", function () {\r",
							"    pm.response.to.be.forbidden;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/comments/:comId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, event, text, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events/comments/\" + event.id, { text }, \"Ошибка при добавлении комментария\", verbose)\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.sendRequest(\"POST\", `/users/${userId}/requests?eventId=${eventId}`, null, \"Ошибка при создании заявки через query\", verbose);\r",
					"}\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async createRequest(userId, eventId, verbose = null) {\r",
					"        return this.post('/users/' + userId + '/requests', { eventId }, \"Ошибка при создании заявки\", verbose);\r",
					"    }\r",
					"\r",
					"    async confirmRequest(initiatorId, eventId, requestId, verbose = null) {\r",
					"        return this.patch(\r",
					"            `/users/${initiatorId}/events/${eventId}/requests/${requestId}/confirm`,\r",
					"            null,\r",
					"            \"Ошибка при подтверждении заявки\",\r",
					"            verbose\r",
					"        )\r",
					"    }\r",
					"\r",
					"    async publicComment(commentId, verbose) {\r",
					"        return this.patch('/admin/events/comments', {commentIds:[commentId], state: \"PUBLISHED\"}, \"Ошибка при подтверждении статуса\", verbose)\r",
					"    }\r",
					"\r",
					"    async updateComment(commentId, userId, text, verbose) {\r",
					"        return this.patch('/users/' + userId + '/events/comments/' + commentId, {text}, \"Ошибка при обновлении комментария\", verbose)\r",
					"    }\r",
					"\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}\r",
					"\r",
					"// Сброс переменных перед прогоном коллекции\r",
					"const defaultVars = {\r",
					"    uid: null,\r",
					"    eid: null,\r",
					"    text: null,\r",
					"    initiatorId: null,\r",
					"    commentatorId: null,\r",
					"    requestId: null,\r",
					"    eventName: null,\r",
					"    commentId: null\r",
					"};\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventName",
			"value": ""
		},
		{
			"key": "comId",
			"value": "1"
		},
		{
			"key": "commentatorName",
			"value": ""
		},
		{
			"key": "oldComment",
			"value": ""
		},
		{
			"key": "newCommentText",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentText",
			"value": ""
		},
		{
			"key": "requestId",
			"value": ""
		}
	]
}